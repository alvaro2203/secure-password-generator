---
// Password Options Component
// Provides controls for customizing password generation settings
---

<div class="space-y-6">
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
    <h2 id="options-heading" class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Password Options</h2>
    
    <!-- Password Generation Form -->
    <form role="form" aria-labelledby="options-heading">
      <!-- Password Length -->
      <fieldset class="space-y-3">
        <legend class="sr-only">Password Length Settings</legend>
        <label for="password-length" class="text-sm font-medium text-gray-700 dark:text-gray-300">
          Password Length
        </label>
        
        <div class="flex items-center space-x-4">
          <input
            type="range"
            id="password-length"
            name="password-length"
            min="4"
            max="128"
            value="12"
            class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700 slider"
            aria-label="Password length slider"
            aria-describedby="length-display"
          />
          <label for="length-input" class="sr-only">Password length number input</label>
          <input
            type="number"
            id="length-input"
            name="length-input"
            min="4"
            max="128"
            value="12"
            class="w-16 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            aria-label="Password length number input"
            aria-describedby="length-display"
          />
        </div>
      </fieldset>
      
      <!-- Character Type Options -->
      <fieldset class="space-y-4 mt-6">
        <legend class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Include Characters</legend>
        
        <!-- Lowercase (always enabled) -->
        <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg" role="group" aria-labelledby="lowercase-label">
          <div class="flex items-center">
            <div class="w-5 h-5 bg-green-500 rounded-full flex items-center justify-center mr-3" aria-hidden="true">
              <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <div id="lowercase-label" class="text-sm font-medium text-gray-900 dark:text-white">Lowercase Letters</div>
              <div class="text-xs text-gray-500 dark:text-gray-400">a-z (always included)</div>
            </div>
          </div>
        </div>
        
        <!-- Uppercase -->
        <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
          <div class="flex items-center">
            <div class="mr-3">
              <input
                type="checkbox"
                id="include-uppercase"
                name="include-uppercase"
                checked
                class="w-5 h-5 text-primary-600 border-gray-300 rounded focus:ring-primary-500 focus:ring-2 dark:border-gray-600 dark:bg-gray-800"
                aria-describedby="uppercase-description"
              />
            </div>
            <div>
              <label for="include-uppercase" class="text-sm font-medium text-gray-900 dark:text-white cursor-pointer">Uppercase Letters</label>
              <div id="uppercase-description" class="text-xs text-gray-500 dark:text-gray-400">A-Z</div>
            </div>
          </div>
        </div>
        
        <!-- Numbers -->
        <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
          <div class="flex items-center">
            <div class="mr-3">
              <input
                type="checkbox"
                id="include-numbers"
                name="include-numbers"
                checked
                class="w-5 h-5 text-primary-600 border-gray-300 rounded focus:ring-primary-500 focus:ring-2 dark:border-gray-600 dark:bg-gray-800"
                aria-describedby="numbers-description"
              />
            </div>
            <div>
              <label for="include-numbers" class="text-sm font-medium text-gray-900 dark:text-white cursor-pointer">Numbers</label>
              <div id="numbers-description" class="text-xs text-gray-500 dark:text-gray-400">0-9</div>
            </div>
          </div>
        </div>
        
        <!-- Special Characters -->
        <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
          <div class="flex items-center">
            <div class="mr-3">
              <input
                type="checkbox"
                id="include-special"
                name="include-special"
                checked
                class="w-5 h-5 text-primary-600 border-gray-300 rounded focus:ring-primary-500 focus:ring-2 dark:border-gray-600 dark:bg-gray-800"
                aria-describedby="special-description"
              />
            </div>
            <div>
              <label for="include-special" class="text-sm font-medium text-gray-900 dark:text-white cursor-pointer">Special Characters</label>
              <div id="special-description" class="text-xs text-gray-500 dark:text-gray-400">!@#$%^&*()_+-=[]{}|;:,.<>?</div>
            </div>
          </div>
        </div>
      </fieldset>
      
      <!-- Quick Presets -->
      <fieldset class="mt-6 pt-4 border-t border-gray-200 dark:border-gray-600">
        <legend class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Quick Presets</legend>
        <div class="flex flex-wrap gap-2" role="group" aria-label="Password preset options">
          <button
            type="button"
            class="preset-button px-3 py-1 text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-300 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            data-preset="simple"
            aria-label="Apply simple preset: 8 characters with basic options"
          >
            Simple (8 chars)
          </button>
          <button
            type="button"
            class="preset-button px-3 py-1 text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-300 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            data-preset="balanced"
            aria-label="Apply balanced preset: 12 characters with all options"
          >
            Balanced (12 chars)
          </button>
          <button
            type="button"
            class="preset-button px-3 py-1 text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-300 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            data-preset="strong"
            aria-label="Apply strong preset: 16 characters with all options"
          >
            Strong (16 chars)
          </button>
          <button
            type="button"
            class="preset-button px-3 py-1 text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-300 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            data-preset="maximum"
            aria-label="Apply maximum preset: 24 characters with all options"
          >
            Maximum (24 chars)
          </button>
        </div>
      </fieldset>
    </form>
  </div>
</div>

<script>
  import type { PasswordOptions } from '../utils/passwordGenerator';
  
  // Get current password options from form
  function getCurrentOptions(): PasswordOptions {
    const lengthSlider = document.getElementById('password-length') as HTMLInputElement;
    const includeUppercase = document.getElementById('include-uppercase') as HTMLInputElement;
    const includeNumbers = document.getElementById('include-numbers') as HTMLInputElement;
    const includeSpecial = document.getElementById('include-special') as HTMLInputElement;
    
    return {
      length: parseInt(lengthSlider?.value || '12'),
      includeUppercase: includeUppercase?.checked || false,
      includeNumbers: includeNumbers?.checked || false,
      includeSpecialChars: includeSpecial?.checked || false,
      includeLowercase: true // Always true
    };
  }

  // Update length display
  function updateLengthDisplay() {
    const lengthSlider = document.getElementById('password-length') as HTMLInputElement;
    const lengthInput = document.getElementById('length-input') as HTMLInputElement;
    const lengthDisplay = document.getElementById('length-display');

    if (!lengthSlider || !lengthInput || !lengthDisplay) return;

    const value = lengthSlider.value;
    lengthDisplay.textContent = value;
    lengthInput.value = value;
  }
  
  // Sync slider and input
  function syncLengthControls() {
    const lengthSlider = document.getElementById('password-length') as HTMLInputElement;
    const lengthInput = document.getElementById('length-input') as HTMLInputElement;
    
    if (!lengthSlider || !lengthInput) return;
    
    // Sync slider to input
    lengthSlider.addEventListener('input', () => {
      lengthInput.value = lengthSlider.value;
      updateLengthDisplay();
    });
    
    // Sync input to slider
    lengthInput.addEventListener('input', () => {
      const value = Math.max(4, Math.min(128, parseInt(lengthInput.value) || 4));
      lengthInput.value = value.toString();
      lengthSlider.value = value.toString();
      updateLengthDisplay();
    });
  }
  
  // Apply preset configuration
  function applyPreset(preset: string) {
    const lengthSlider = document.getElementById('password-length') as HTMLInputElement;
    const lengthInput = document.getElementById('length-input') as HTMLInputElement;
    const includeUppercase = document.getElementById('include-uppercase') as HTMLInputElement;
    const includeNumbers = document.getElementById('include-numbers') as HTMLInputElement;
    const includeSpecial = document.getElementById('include-special') as HTMLInputElement;
    
    if (!lengthSlider || !lengthInput || !includeUppercase || !includeNumbers || !includeSpecial) return;
    
    const presets = {
      simple: { length: 8, uppercase: true, numbers: true, special: false },
      balanced: { length: 12, uppercase: true, numbers: true, special: true },
      strong: { length: 16, uppercase: true, numbers: true, special: true },
      maximum: { length: 24, uppercase: true, numbers: true, special: true }
    };
    
    const config = presets[preset as keyof typeof presets];
    if (!config) return;
    
    // Apply configuration
    lengthSlider.value = config.length.toString();
    lengthInput.value = config.length.toString();
    includeUppercase.checked = config.uppercase;
    includeNumbers.checked = config.numbers;
    includeSpecial.checked = config.special;

    updateLengthDisplay();
    
    // Add visual feedback
    const button = document.querySelector(`[data-preset="${preset}"]`);
    if (button) {
      button.classList.add('animate-pulse');
      setTimeout(() => {
        button.classList.remove('animate-pulse');
      }, 200);
    }
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    syncLengthControls();
    updateLengthDisplay();
    
    // Add preset button listeners
    document.querySelectorAll('.preset-button').forEach(button => {
      button.addEventListener('click', (e) => {
        const preset = (e.target as HTMLElement).getAttribute('data-preset');
        if (preset) {
          applyPreset(preset);
        }
      });
    });
  });
  
  // Make function globally available
  (window as any).getCurrentOptions = getCurrentOptions;
</script>

<style>
  /* Custom slider styling */
  .slider::-webkit-slider-thumb {
    appearance: none;
    height: 20px;
    width: 20px;
    border-radius: 50%;
    background: #8B5CF6;
    cursor: pointer;
    border: 2px solid #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: all 0.2s ease-in-out;
  }
  
  .slider::-webkit-slider-thumb:hover {
    background: #7C3AED;
    transform: scale(1.1);
  }
  
  .slider::-moz-range-thumb {
    height: 20px;
    width: 20px;
    border-radius: 50%;
    background: #8B5CF6;
    cursor: pointer;
    border: 2px solid #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: all 0.2s ease-in-out;
  }
  
  .slider::-moz-range-thumb:hover {
    background: #7C3AED;
    transform: scale(1.1);
  }
  
  .slider::-webkit-slider-track {
    height: 8px;
    border-radius: 4px;
    background: linear-gradient(to right, #E5E7EB, #8B5CF6);
  }
  
  .slider::-moz-range-track {
    height: 8px;
    border-radius: 4px;
    background: linear-gradient(to right, #E5E7EB, #8B5CF6);
  }
  
  .dark .slider::-webkit-slider-track {
    background: linear-gradient(to right, #374151, #8B5CF6);
  }
  
  .dark .slider::-moz-range-track {
    background: linear-gradient(to right, #374151, #8B5CF6);
  }
</style>