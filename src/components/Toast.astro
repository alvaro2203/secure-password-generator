---
// Toast Notification Component
// Displays temporary notifications with auto-dismiss functionality
---

<div
  id="toast-container"
  class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 space-y-2"
  role="alert"
  aria-live="polite"
  aria-atomic="true"
>
</div>

<script>
  export interface ToastOptions {
    message: string;
    type?: "success" | "error" | "info" | "warning";
    duration?: number;
    showIcon?: boolean;
  }

  let toastCounter = 0;

  /**
   * Shows a toast notification
   */
  function showToast(options: ToastOptions) {
    const {
      message,
      type = "info",
      duration = 3000,
      showIcon = true,
    } = options;

    const toastId = `toast-${++toastCounter}`;
    const container = document.getElementById("toast-container");

    if (!container) return;

    // Create toast element
    const toast = document.createElement("div");
    toast.id = toastId;
    toast.className = `
      flex items-center p-4 max-w-xs bg-white border border-gray-200 rounded-lg shadow-lg dark:bg-gray-800 dark:border-gray-700
      transform transition-all duration-300 ease-in-out
      ${type === "success" ? "border-l-4 border-l-green-500" : ""}
      ${type === "error" ? "border-l-4 border-l-red-500" : ""}
      ${type === "warning" ? "border-l-4 border-l-yellow-500" : ""}
      ${type === "info" ? "border-l-4 border-l-blue-500" : ""}
    `;

    // Add icon if enabled
    let iconSvg = "";
    if (showIcon) {
      switch (type) {
        case "success":
          iconSvg = `
            <svg class="w-5 h-5 text-green-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          `;
          break;
        case "error":
          iconSvg = `
            <svg class="w-5 h-5 text-red-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          `;
          break;
        case "warning":
          iconSvg = `
            <svg class="w-5 h-5 text-yellow-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          `;
          break;
        case "info":
          iconSvg = `
            <svg class="w-5 h-5 text-blue-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          `;
          break;
      }
    }

    toast.innerHTML = `
      ${iconSvg}
      <div class="text-sm font-medium text-gray-700 dark:text-gray-300">${message}</div>
      <button 
        type="button" 
        class="ml-auto -mx-1.5 -my-1.5 bg-transparent text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" 
        aria-label="Close"
        onclick="closeToast('${toastId}')"
      >
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;

    // Add toast to container
    container.appendChild(toast);

    // Animate in
    requestAnimationFrame(() => {
      toast.classList.add("animate-slide-up");
    });

    // Auto-dismiss after duration
    if (duration > 0) {
      setTimeout(() => {
        closeToast(toastId);
      }, duration);
    }
  }

  /**
   * Closes a specific toast
   */
  function closeToast(toastId: string) {
    const toast = document.getElementById(toastId);
    if (!toast) return;

    // Animate out
    toast.classList.add("opacity-0", "transform", "scale-95", "translate-y-2");

    // Remove from DOM after animation
    setTimeout(() => {
      toast.remove();
    }, 300);
  }

  // Make functions globally available
  (window as any).showToast = showToast;
  (window as any).closeToast = closeToast;
</script>
