---
// Main Password Generator Component
// Orchestrates all password generation functionality
import PasswordOptions from './PasswordOptions.astro';
import PasswordDisplay from './PasswordDisplay.astro';
import StrengthIndicator from './StrengthIndicator.astro';
---

<div class="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-purple-900 dark:to-gray-900 py-8 px-4">
  <div class="max-w-4xl mx-auto">
    <!-- Header -->
    <header class="text-center mb-8">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2">
        Secure Password Generator
      </h1>
      <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
        Generate cryptographically secure passwords with customizable options. 
        All generation happens locally in your browser for maximum security.
      </p>
    </header>
    
    <!-- Main Content -->
    <section class="grid grid-cols-1 lg:grid-cols-2 gap-8" aria-label="Password generation interface">
      <!-- Left Column: Options -->
      <section aria-labelledby="options-heading">
        <PasswordOptions />
      </section>
      
      <!-- Right Column: Display & Strength -->
      <section aria-labelledby="results-heading">
        <div class="space-y-6">
          <article class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
            <h2 id="results-heading" class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Generated Password</h2>
            <PasswordDisplay />
          </article>
          
          <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <div class="p-6">
              <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Security Analysis</h2>
              <StrengthIndicator />
            </div>
          </article>
        </div>
      </section>
    </section>
    
    <!-- Security Info -->
    <aside class="mt-8 bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6 border border-blue-200 dark:border-blue-800" role="complementary" aria-labelledby="security-info-heading">
      <div class="flex items-start">
        <svg class="w-6 h-6 text-blue-600 dark:text-blue-400 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
        <div>
          <h3 id="security-info-heading" class="text-sm font-semibold text-blue-900 dark:text-blue-200 mb-2">Privacy & Security</h3>
          <p class="text-sm text-blue-800 dark:text-blue-300 leading-relaxed">
            Your passwords are generated entirely in your browser using cryptographically secure random number generation. 
            No passwords are sent to any server or stored anywhere. This tool works completely offline once loaded.
          </p>
        </div>
      </div>
    </aside>
  </div>
</div>

<script>
  import { generatePassword, validatePasswordOptions } from '../utils/passwordGenerator';
  
  // Generate password with current options
  function handleGeneratePassword() {
    const getCurrentOptions = (window as any).getCurrentOptions;
    const updatePasswordDisplay = (window as any).updatePasswordDisplay;
    const showToast = (window as any).showToast;
    
    if (!getCurrentOptions || !updatePasswordDisplay) {
      console.error('Required functions not available');
      return;
    }
    
    try {
      const options = getCurrentOptions();
      
      // Validate options
      const validation = validatePasswordOptions(options);
      if (!validation.isValid) {
        if (showToast) {
          showToast({
            message: validation.errors[0],
            type: 'warning',
            duration: 3000
          });
        }
        // Still generate password even with warnings
      }
      
      // Generate password
      const password = generatePassword(options);
      updatePasswordDisplay(password);
      
      // Add visual feedback to generate button
      const generateButton = document.getElementById('generate-button');
      if (generateButton) {
        generateButton.classList.add('animate-pulse');
        setTimeout(() => {
          generateButton.classList.remove('animate-pulse');
        }, 300);
      }
      
    } catch (error) {
      console.error('Password generation failed:', error);
      if (showToast) {
        showToast({
          message: 'Failed to generate password. Please try again.',
          type: 'error',
          duration: 3000
        });
      }
    }
  }
  
  // Auto-generate password on option changes
  function setupAutoGeneration() {
    const elements = [
      'password-length',
      'include-uppercase',
      'include-numbers',
      'include-special',
      'length-input'
    ];
    
    elements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.addEventListener('change', () => {
          // Debounce auto-generation
          clearTimeout((window as any).autoGenTimeout);
          (window as any).autoGenTimeout = setTimeout(() => {
            handleGeneratePassword();
          }, 300);
        });
      }
    });
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    // Set up generate button
    const generateButton = document.getElementById('generate-button');
    if (generateButton) {
      generateButton.addEventListener('click', handleGeneratePassword);
    }
    
    // Set up auto-generation
    setupAutoGeneration();
    
    // Generate initial password
    setTimeout(() => {
      handleGeneratePassword();
    }, 100);
  });
</script>